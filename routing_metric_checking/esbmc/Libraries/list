/*******************************************************************
 Module:

 Author: Felipe Rodrigues

 Date: October 2012

 \*******************************************************************/

#ifndef __STL_LIST
#define __STL_LIST

#include <vector>

namespace std {

template<class T>
class list {
public:
	typedef T& reference;
	typedef const T& const_reference;
	typedef int size_type;
	typedef int difference_type;
	typedef T value_type;
	typedef T* pointer;
	typedef const T* const_pointer;

	typedef bool (pred_double)(double, double);
	typedef bool (pred)(const int &);

	struct node {
		T data;
		node* prev;
		node* next;
		node(T t, node* p, node* n) :
				data(t), prev(p), next(n) {
		}
	};

	node* head;
	node* tail;
	int _size;

	class iterator {
	public:
		node* it;
		int it_size;

		iterator(const iterator& x): it(x.it), it_size(x.it_size){}
		iterator(): it(NULL), it_size(0){}
		iterator& operator=(const iterator& x){
			this->it = new node(x.it->data, x.it->prev, x.it->next);
			this->it_size = x.it_size;
			return *this;
		}

		T* operator ->();

		T operator *(){
			return this->it->data;
		}

		iterator operator ++(){
			this->it = this->it->next;
			return *this;
		}
		iterator operator ++(int){
			this->it = this->it->next;
			return *this;
		}

		iterator operator --(){
			this->it = this->it->prev;
			return *this;
		}
		iterator& operator --(int){
			this->it = this->it->prev;
			return *this;
		}

		bool operator ==(const iterator& x) const{
			return (x.it == this->it && x.it_size == this->it_size);
		}
		bool operator !=(const iterator& x) const{
			return (x.it != this->it && x.it_size != this->it_size);
		}

		bool operator <(const iterator&) const;
		bool operator >(const iterator&) const;

		bool operator <=(const iterator&) const;
		bool operator >=(const iterator&) const;

		iterator operator +(int) const;
		iterator operator -(int) const;

		iterator& operator +=(int);
		iterator& operator -=(int);
	};

	class reverse_iterator {
	public:
		node* it;
		int it_size;

		reverse_iterator(const reverse_iterator& x): it(x.it), it_size(x.it_size){}
		reverse_iterator(): it(NULL){}
		reverse_iterator& operator=(const reverse_iterator& x){
			this->it = new node(x.it->data, x.it->prev, x.it->next);
			this->it_size = x.it_size;
			return *this;
		}

		T* operator ->();

		T operator *(){
			return this->it->data;
		}

		reverse_iterator operator ++(){
			this->it = this->it->next;
			return *this;
		}
		reverse_iterator operator ++(int){
			this->it = this->it->next;
			return *this;
		}

		reverse_iterator operator --(){
			return *this;
		}
		reverse_iterator& operator --(int){
			return *this;
		}

		bool operator ==(const reverse_iterator& x) const{
			return (x.it == this->it && x.it_size == this->it_size);
		}
		bool operator !=(const reverse_iterator& x) const{
			return (x.it != this->it && x.it_size != this->it_size);
		}

		bool operator <(const reverse_iterator&) const;
		bool operator >(const reverse_iterator&) const;

		bool operator <=(const reverse_iterator&) const;
		bool operator >=(const reverse_iterator&) const;

		reverse_iterator operator +(int) const;
		reverse_iterator operator -(int) const;

		reverse_iterator& operator +=(int);
		reverse_iterator& operator -=(int);
	};

	explicit list() : head(NULL), tail(NULL), _size(0) {}
	explicit list ( size_type n, const T& value = T() ){
		int i;
		this->_size = 0;
		for(i=0; i<n; i++)
			this->push_back(value);
	}
	explicit list (T* t1, T* t2){
		this->_size = 0;
		for(; t1!=t2; t1++)
			this->push_back(*t1);
	}

	list ( iterator first, iterator last) : head(first.it), tail(last.it->prev), _size(first.it_size) {}

	list(const list<T>& x) : head(x.head), tail(x.tail), _size(x._size) {}

	~list() {
		while (head) {
			node* temp(head);
			head = head->next;
			delete temp;
		}
	}

	iterator begin (){
		iterator it;
		it.it = this->head;
		it.it_size = this->_size;
		return it;
	}
	iterator end (){
		iterator it;
		this->tail->next = new node(NULL, this->tail, NULL);
		it.it = this->tail->next;
		it.it_size = this->_size;
		return it;
	}
	reverse_iterator rbegin(){
		reverse_iterator it;
		it.it = this->tail;
		it.it_size = this->_size;
		return it;
	}
	reverse_iterator rend(){
		reverse_iterator it;
		it.it = this->head;
		it.it_size = this->_size;
		return it;
	}

	size_type size() const{
		return this->_size;
	}
	bool empty ( ) const{
		if (this->_size == 0)
			return true;
		return false;
	}
	size_type max_size () const{
		return this->_size;
	}
	void resize ( size_type sz, T c = 0 ){
		int i;
		int tmp_int;
		if(this->_size > sz){
			tmp_int = this->_size - sz;
			for(i=0;i<tmp_int;i++){
				this->tail = this->tail->prev;
			}
			this->tail->next = NULL;
			this->_size = sz;
		}else{
			tmp_int = sz - this->_size;
			for(i=0;i<tmp_int;i++){
				this->push_back(c);
			}
			this->_size = sz;
		}
	}
    T back ( ){
    	__ESBMC_assert(!empty(), "list is empty");
    	return this->tail->data;
    }
    T front ( ){
    	__ESBMC_assert(!empty(), "list is empty");
    	return this->head->data;
    }
	void pop_front(){
		__ESBMC_assert(!empty(), "list is empty");
		if (this->_size == 1){
			this->head = this->tail = NULL;
		}else{
			this->head->data = this->head->next->data;
			this->head->prev = NULL;
			this->head->next = this->head->next->next;
		}
		this->_size--;
	}
	void pop_back ( ){
		__ESBMC_assert(!empty(), "list is empty");
		if (this->_size == 1){
			this->head = this->tail = NULL;
		}else{
			this->tail->data = this->tail->prev->data;
			this->tail->prev = this->tail->prev->prev;
			this->tail->next = NULL;
		}
		this->_size--;
	}
	void push_back ( const T& x ){
		if(this->empty()){
			this->tail = new node(x, NULL, NULL);
			this->head = this->tail;
		}else{
			this->tail->next = new node(x, this->tail, NULL);
			this->tail = this->tail->next;
			if(this->_size == 1)
				this->head->next == this->tail;
		}
		this->_size++;
	}
	void push_front ( const T& x ){
		if(this->empty()){
			this->head = new node(x, NULL, NULL);
			this->tail = this->head;
		}else{
			this->head->prev = new node(x, NULL, this->head);
			this->head = this->head->prev;
			if(this->_size == 1)
				this->tail->prev == this->head;
		}
		this->_size++;
	}

	iterator insert(iterator position, const T& x){
		node* tmp;
		tmp = new node(x, position.it->prev, position.it);
		position.it->prev->next = tmp;
		position.it->prev = tmp;
		position.it_size++;
		this->_size++;
		return position;
	}
	void insert(iterator position, size_type n, const T& x){
		int i;
		for(i=0;i<n;i++){
			this->insert(position,x);
		}
	}
	void insert(iterator position, vector<int>::iterator n, vector<int>::iterator x){
		int tmp;
		while(n!=x){
			tmp = *n;
			this->insert(position, tmp );
			n++;
		}
	}

	void assign ( iterator first, iterator last ){
		this->head = first.it;
		this->_size = first.it_size;
		this->tail = last.it->prev;
	}
	void assign ( T* first, T* last ){
		list <T> list (first, last);
		this->head = list.head;
		this->_size = list._size;
		this->tail = list.tail;
	}
	void assign ( size_type n, const T& u ){
		list <T> list (n, u);
		this->head = list.head;
		this->_size = list._size;
		this->tail = list.tail;
	}

	iterator erase(iterator& position){
		if(position.it == this->head){
			this->pop_front();
			position.it = new node(this->head->data, this->head->prev, this->head->next);
			position.it_size = this->_size;
			return position;
		}
		if(position.it == this->tail){
			this->pop_back();
			position.it = new node(this->tail->data, this->tail->prev, this->tail->next);
			position.it_size = this->_size;
			return position;
		}
		node* tmp_ptr = this->head;
		int i;
		do{
			tmp_ptr = tmp_ptr->next;
		}while((tmp_ptr != position.it) && (tmp_ptr != NULL)) ;
		if (tmp_ptr != NULL){
			position.it = tmp_ptr->next;
			position.it_size = this->_size--;
			if(tmp_ptr->prev != NULL)
				tmp_ptr->prev->next = tmp_ptr->next;
			if(tmp_ptr->next != NULL)
				tmp_ptr->next->prev = tmp_ptr->prev;
		}
		return position;
	}
	iterator erase(iterator position, iterator last){
		if((position.it == this->head) && (last.it == this->head)){
			this->pop_front();
			position.it = new node(this->head->data, this->head->prev, this->head->next);
			position.it_size = this->_size;
			return position;
		}
		if((position.it == this->tail) && (last.it == this->tail)){
			this->pop_back();
			position.it = new node(this->tail->data, this->tail->prev, this->tail->next);
			position.it_size = this->_size;
			return position;
		}
		node* tmp_ptr = this->head;
		int i, c2 = 0;

		do{
			tmp_ptr = tmp_ptr->next;
		}while((tmp_ptr != position.it) && (tmp_ptr != NULL)) ;

		if (position.it == last.it){
			do{
				tmp_ptr = tmp_ptr->next;
			}while((tmp_ptr != position.it) && (tmp_ptr != NULL)) ;
			if (tmp_ptr != NULL){
				position.it = tmp_ptr->next;
				position.it_size = this->_size--;
				tmp_ptr->prev->next = tmp_ptr->next;
				tmp_ptr->next->prev = tmp_ptr->prev;
			}
			return position;
		}
		node* tmp_ptr_last = tmp_ptr;
		do{
			tmp_ptr_last = tmp_ptr_last->next;
			c2++;
		}while((tmp_ptr_last != last.it) && (tmp_ptr_last != NULL)) ;
		if (tmp_ptr != NULL){
			this->_size = this->_size-c2;
			last.it_size = this->_size;
			last.it = last.it->prev;
			last.it->prev = tmp_ptr_last;
			tmp_ptr->next = last.it;
		}
		return last;
	}
	void swap(list<T>& x){
		list<T> y;
		y = x;
		x = *this;
		*this = y;
	}
	void clear(){
		this->_size = 0;
		this->head = new node(0, NULL, NULL);
		this->tail = new node(0, NULL, NULL);
	}

	// list operations:
	void splice(iterator position, list<T>& x){
		list<T>::iterator it1 = x.begin();
		node* tmp;
		int i;
		for(i=0;i<it1.it_size;i++){
			tmp = new node(it1.it->data, position.it->prev, position.it);
			if (position.it->prev != NULL)
				position.it->prev->next = tmp;
			position.it->prev = tmp;
			position.it_size++;
			this->_size++;
			it1++;
		}
		x.clear();
	}
	void splice(iterator position, list<T>& x, iterator i){
		node* tmp;
		tmp = new node(i.it->data, position.it->prev, position.it);
		if (position.it->prev != NULL)
			position.it->prev->next = tmp;
		position.it->prev = tmp;
		position.it_size++;
		this->_size++;
		x.erase(i);
	}
	void splice(iterator position, list<T>& x, iterator first, iterator last){/*
		list<T>::iterator tmp_next = first;
		while(first.it != last.it){
			tmp_next++;
			if(first.it->prev != NULL)
				first.it->prev->next = first.it->next;
			if(first.it->next != NULL)
				first.it->next->prev = first.it->prev;
			first.it->next = this->head;
			//if (first.it->next == NULL)
				//this->tail = first.it;
			first.it->prev = position.it->prev;
			//if (first.it->prev == NULL)
				//this->head = first.it;
			position.it->prev =first.it;
			x._size--;
			this->_size++;
			position.it_size++;
			first.it = tmp_next.it;
			if (first.it == NULL)
				break;
		}
	*/}
	void remove(const T& value){
		if(value == this->head->data){
			this->pop_front();
		} else {
			if(value == this->tail->data){
				this->pop_back();
		}else{
			node* tmp_ptr = this->head;
			int i;
			do{
				tmp_ptr = tmp_ptr->next;
			}while((tmp_ptr != NULL) && (tmp_ptr->data != value)) ;
			if (tmp_ptr != NULL){
				this->_size--;
				tmp_ptr->prev->next = tmp_ptr->next;
				tmp_ptr->next->prev = tmp_ptr->prev;
			}
		}
		}
	}

	void remove_if ( pred* x ){
		node* tmp = this->head;
		while(tmp != NULL){
			if (x(tmp->data)){
				this->_size--;
				if(tmp->prev != NULL){
					tmp->prev->next = tmp->next;
				}
				if(tmp->next != NULL){
					tmp->next->prev = tmp->prev;
				}
			}
			tmp = tmp->next;
		}
	}
	template <class Predicate>
		void remove_if ( Predicate* pred ){
		node* tmp = this->head;
		while(tmp != NULL){
			if (pred(tmp->data)){
				this->_size--;
				if(tmp->prev != NULL){
					tmp->prev->next = tmp->next;
				}
				if(tmp->next != NULL){
					tmp->next->prev = tmp->prev;
				}
			}
			tmp = tmp->next;
		}
	}

	void unique() {
		node* tmp = this->head;
		node* sec_temp = this->head;
		int b = 0;
		while (tmp != NULL) {
			while (sec_temp != NULL) {
				if (sec_temp->data == tmp->data) {
					b++;
				}
				if (b == 2) {
					break;
				}
				sec_temp = sec_temp->next;
			}
			if (b == 2) {
				this->_size--;
				if (tmp->prev != NULL) {
					tmp->prev->next = tmp->next;
				}
				if (tmp->next != NULL) {
					tmp->next->prev = tmp->prev;
				}
			}
			b = 0;
			sec_temp = this->head;
			tmp = tmp->next;
		}
	}
	void unique(pred_double* x) {
		node* tmp = this->head;
		node* sec_temp = this->head;
		int b = 0;
		while (tmp != NULL) {
			while (sec_temp != NULL) {
				if (x(sec_temp->data,tmp->data)) {
					b++;
				}
				if (b == 2) {
					break;
				}
				sec_temp = sec_temp->next;
			}
			if (b == 2) {
				this->_size--;
				if (tmp->prev != NULL) {
					tmp->prev->next = tmp->next;
				}
				if (tmp->next != NULL) {
					tmp->next->prev = tmp->prev;
				}
			}
			b = 0;
			sec_temp = this->head;
			tmp = tmp->next;
		}
	}
	template <class Predicate>
		void unique ( Predicate pred );

	void merge(list<T>& x){
		int i;
		node* tmp = this->head;
		node* tmpX = x.head;
		node* aux;
		for( i = 0; i < x._size; i++){
			if (tmpX->data <= tmp->data){
				aux = new node (tmpX->data, tmp->prev, tmp);
				if (tmp->prev != NULL){
					tmp->prev->next = aux;
				}else{
					this->head = aux;
				}
				tmp->prev = aux;
				this->_size++;
			}
			tmp = tmp->next;
			tmpX = tmpX->next;
		}
		x.clear();
	}

	void merge(list<T>& x, pred_double* y);

	void sort();

	void reverse(){
		list<T> tmpList;
		node* tmpNode = this->tail;
		int length = this->_size;
		int tmpValue;
		for (int i = 0; i < length; i++){
			tmpValue = tmpNode->data;
			tmpList.push_back(tmpValue);
			tmpNode = tmpNode->prev;
		}
		this->head = tmpList.head;
		this->tail = tmpList.tail;
		this->_size = tmpList._size;
	}
};

  void advance (list<unsigned int>::iterator& it, int n){
	  int i;
	  for(i = 0; i < n; i++)
		  it.it = it.it->next;
  }

  void advance (list<int>::iterator& it, int n){
	  int i;
	  for(i = 0; i < n; i++)
		  it.it = it.it->next;
  }

  bool operator== ( const list<int>& x, const list<int>& y ){
		if(x._size != y._size)
			return false;
		list<int>::node* tmpX = x.head;
		list<int>::node* tmpY = y.head;
		for (int i = 0; (i < x._size) && (i < y._size); i++){
			if (tmpX->data != tmpY->data){
				return false;
			}
			tmpX = tmpX->next;
			tmpY = tmpY->next;
		}
		return true;
  }
  bool operator!= ( const list<int>& x, const list<int>& y ){
	  return (x._size != y._size && x.head != y.head && x.tail != y.tail);
  }
  bool operator== ( const list<double>& x, const list<double>& y ){
	  return (x._size == y._size && x.head == y.head && x.tail == y.tail);
  }
  bool operator!= ( const list<double>& x, const list<double>& y ){
	  return (x._size != y._size && x.head != y.head && x.tail != y.tail);
  }

}

#endif
