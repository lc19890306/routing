/*******************************************************************\

Module: 

Author: Felipe Rodrigues

Date: February 2012

\*******************************************************************/

#ifndef __STL_MAP
#define __STL_MAP

#include "utility"
//#include "iterator"
#include "iostream"
#include "vector"
#include "functional"

#define MAP_SIZE 1000

namespace std {

  template < class Key, class T, class Compare = less<Key>,
             class Allocator = allocator<pair<const Key,T> > >
  class multimap{
  public:
	  typedef Key key_type;
	     typedef T mapped_type;
	     typedef pair<const Key, T> value_type;
	     typedef Compare key_compare;
	     typedef int size_type;

	     class iterator{
	       public:

	       iterator(const iterator&);
	       iterator();
	       iterator& operator=(const iterator&);

	       value_type * operator -> ();

	       value_type & operator * ();

	       iterator& operator ++ ();
	       iterator& operator ++ (int);

	       iterator& operator -- ();
	       iterator& operator -- (int);

	       bool operator == (const iterator& it) const;
	       bool operator != (const iterator& it) const;
	     };

	     class const_iterator{
	       public:
	       const_iterator(const const_iterator&);
	       const_iterator(iterator);
	       const_iterator();
	       const_iterator& operator=(const const_iterator&);

	       const value_type * operator -> ();

	       const value_type & operator * ();

	       const_iterator& operator ++ ();
	       const_iterator& operator ++ (int);

	       const_iterator& operator -- ();
	       const_iterator& operator -- (int);

	       bool operator == ( const const_iterator&)const;
	       bool operator != ( const const_iterator&)const;
	     };
/*
	     class reverse_iterator{
	       public:
	       reverse_iterator(reverse_iterator);
	       reverse_iterator();
	       explicit reverse_iterator(iterator);

	       iterator base() const; // explicit

	       reverse_iterator& operator=(const reverse_iterator&);

	       value_type * operator -> ();

	       value_type & operator * ();

	       reverse_iterator& operator ++ ();
	       reverse_iterator& operator ++ (int);

	       reverse_iterator& operator -- ();
	       reverse_iterator& operator -- (int);

	       bool operator == ( const reverse_iterator&)const;
	       bool operator != ( const reverse_iterator&)const;
	     };

	     class  const_reverse_iterator {
	       public:
	       const_reverse_iterator(const_reverse_iterator);
	       const_reverse_iterator();
	       explicit const_reverse_iterator(const_iterator);

	       const_iterator base() const; // explicit

	       const_reverse_iterator& operator=(const const_reverse_iterator);

	       const value_type * operator -> ();

	       const value_type & operator * ();

	       const_reverse_iterator& operator ++ ();
	       const_reverse_iterator& operator ++ (int);

	       const_reverse_iterator& operator -- ();
	       const_reverse_iterator& operator -- (int);

	       bool operator == ( const const_reverse_iterator&)const;
	       bool operator != ( const const_reverse_iterator&)const;
	     };

	  explicit multimap ( const Compare& comp = Compare(),
	                 const Allocator& = Allocator() );
	  multimap ( const multimap<Key,T,Compare,Allocator>& x );
      template <class Key, class T, class Compare, class Allocator>
        bool operator== ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
      template <class Key, class T, class Compare, class Allocator>
        bool operator<  ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
      template <class Key, class T, class Compare, class Allocator>
        bool operator!= ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
      template <class Key, class T, class Compare, class Allocator>
        bool operator>  ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
      template <class Key, class T, class Compare, class Allocator>
        bool operator>= ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
      template <class Key, class T, class Compare, class Allocator>
        bool operator<= ( const multimap<Key,T,Compare,Allocator>& x,
                          const multimap<Key,T,Compare,Allocator>& y );
*/
	  size_type count ( const key_type& x ) const;
	  iterator insert ( const value_type& x );
	  iterator insert ( iterator position, const value_type& x );
	  template <class InputIterator>
	     void insert ( InputIterator first, InputIterator last );
      iterator begin ();
      const_iterator begin () const;
      iterator end ();
      const_iterator end () const;
  };

  template <class Key, class T, class Compare=less<Key> >
  class map {

	int _size;
	T buf[MAP_SIZE];

    public:


    typedef Key key_type;
    typedef T mapped_type;
    typedef pair<const Key, T> value_type;
    typedef Compare key_compare;
    typedef int size_type;

	typedef bool (func)(Key, Key);

    class iterator{
      public:

	  int it_size;
	  T* buf;

      iterator(const iterator& x) : it_size(x.it_size){
    	  this->buf = x.buf;
      }
      iterator() : it_size(0), buf(NULL){}
      iterator& operator=(const iterator& x) : it_size(x.it_size){
    	  this->buf = x.buf;
    	  return *this;
      }

      value_type * operator -> ();

      value_type & operator * ();

      iterator& operator ++ ();
      iterator& operator ++ (int);

      iterator& operator -- ();
      iterator& operator -- (int);

      //bool operator == (const iterator& it) const;
      bool operator != (const iterator& it) const;
    };


    class const_iterator{/*
      public:
      const_iterator(const const_iterator&);
      const_iterator();
      const_iterator& operator=(const const_iterator&);

      //const value_type * operator -> ();

      //const value_type & operator * ();

      const_iterator& operator ++ ();
      const_iterator& operator ++ (int);

      const_iterator& operator -- ();
      const_iterator& operator -- (int);

      bool operator == ( const const_iterator&)const;
      bool operator != ( const const_iterator&)const;
    */};

    class reverse_iterator{
      public:
      //reverse_iterator(reverse_iterator);
      reverse_iterator();
      //explicit reverse_iterator(iterator);

      //iterator base() const; // explicit

      //reverse_iterator& operator=(const reverse_iterator&);

      value_type * operator -> ();

      value_type & operator * ();

      reverse_iterator& operator ++ ();
      reverse_iterator& operator ++ (int);

      //reverse_iterator& operator -- ();
      //reverse_iterator& operator -- (int);

      //bool operator == ( const reverse_iterator&)const;
      bool operator != ( const reverse_iterator&)const;
    };

    class  const_reverse_iterator {
      /*public:
      const_reverse_iterator(const_reverse_iterator);
      const_reverse_iterator();
      explicit const_reverse_iterator(const_iterator);

      const_iterator base() const; // explicit

      const_reverse_iterator& operator=(const const_reverse_iterator);

      //const value_type * operator -> ();

      //const value_type & operator * ();

      const_reverse_iterator& operator ++ ();
      const_reverse_iterator& operator++ (int);

      const_reverse_iterator& operator -- ();
      const_reverse_iterator& operator -- (int);

      bool operator == ( const const_reverse_iterator&)const;
      bool operator != ( const const_reverse_iterator&)const;
    */};

    map() : _size(0){}
    map( iterator first, iterator last){
    	//for (int i = 0; i ; first.buf++ ){
    		//this->buf = first.buf;
    	//}
    	//this->_size = first.it_size;
    }
    map(func* x);
    T& operator[](const Key& x){
    	return this->buf[x];
    }

    // iterators:
    iterator begin(){
    	iterator it;
    	it.buf = this->buf;
    	it.it_size = this->_size;
    	return it;
    }
    const_iterator begin() const;
    iterator end(){
    	iterator it;
    	it.buf = this->buf+MAP_SIZE;
    	it.it_size = this->_size;
    	return it;
    }
    const_iterator end() const;
    reverse_iterator rbegin();
    const_reverse_iterator rbegin() const;
    reverse_iterator rend();
    const_reverse_iterator rend() const;

    // capacity:
    bool empty() const;
    size_type size() const;
    size_type max_size() const;

    void clear();
    size_type count(const key_type& x) const;

    void erase(iterator position);
    size_type erase(const key_type& x);
    void erase(iterator first, iterator last);


    // modifiers:
    pair<iterator,bool> insert ( const value_type& x );
               iterator insert ( iterator position, const value_type& x );
    void insert ( map<Key,T>::iterator first, map<Key,T>::iterator last );
    //pair<iterator, bool> insert(const value_type& x);
    //pair<iterator, bool> insert(const std::pair<Key,T>& x);
    //map<Key,T>::iterator insert(map<Key,T>::iterator position, const value_type& x);
    void insert( map<Key,T>::iterator position, std::pair<Key,T>& x);

    //void swap(map<Key,T,Compare>);

    // map operations:
    iterator find(const key_type& x);
    const_iterator find(const key_type& x) const;
    iterator lower_bound(const key_type& x);
    //const_iterator lower_bound(const key_type& x) const;
    iterator upper_bound(const key_type& x);
    //const_iterator upper_bound(const key_type& x) const;
    pair<iterator,iterator> equal_range(const key_type& x);
    pair<const_iterator,const_iterator> equal_range(const key_type& x) const;
    key_compare key_comp ( ) const;

    void swap(map<Key,T>& x);

    /*
    // comparators:

    bool operator == (const map<Key,T,Compare>&) const;
    bool operator != (const map<Key,T,Compare>&) const;
    bool operator >= (const map<Key,T,Compare>&) const;
    bool operator <= (const map<Key,T,Compare>&) const;
    */
  };
  // specialized algorithms:
  template <class Key, class T, class Compare>
  	  void swap(map<Key,T,Compare>&, vector<Key,T,Compare>&);

}

#endif

