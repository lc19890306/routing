#ifndef STL_SSTREAM
#define STL_SSTREAM

#include "streambuf"
#include "definitions.h"
#include "ostream"
#include "ios"
#include "string"
#include "cstdio"
#include "cstdlib"

#ifdef _WIN64
	#define NUM_SIZE 20
#else
	#define NUM_SIZE 20
#endif
#define DEC 10

namespace std
{
class stringbuf: public streambuf{
public:
	explicit stringbuf ( ios_base::openmode which = ios_base::in | ios_base::out );
	explicit stringbuf ( const string& str, ios_base::openmode which = ios_base::in | ios_base::out );
	void str ( const string & s );
	string str ( ) const;
//	Virtual protected members
protected:
	streambuf* setbuf ( char* s, streamsize n) {}
	streampos seekoff ( streamoff off, ios_base::seekdir way, ios_base::openmode which = ios_base::in | ios_base::out ) {}
	streampos seekpos ( streampos sp, ios_base::openmode which = ios_base::in | ios_base::out ){}
	int underflow ( ){}
	int pbackfail ( int c = EOF ){}
	int overflow ( int c = EOF ){}

};

class istringstream:public istream{
public:
	explicit istringstream ( openmode which = ios_base::in ){istream();}
	explicit istringstream ( const string & str, openmode which = ios_base::in ){istream();}
	stringbuf* rdbuf ( ) const;
	string str ( ) const;
	void str ( const string & s );
//	explicit istringstream ( const string & str );
//	istream& operator>> (string& val );
//	istream& operator>> (int& val );
//	bool good ( ) const;
};

class stringstream:public istream, public ostream{
public:
	string _string;
	explicit stringstream ( openmode which = ios_base::out|ios_base::in ) {istream();ostream();}
	explicit stringstream ( const string & str, openmode which = ios_base::out|ios_base::in ) {istream();ostream();}
	stringbuf* rdbuf ( ) const;
	string str ( ) const{
		return _string;
	}
	ostream& operator<< (string& val) {
		_string.append(val);
		return ostream();
	}

	ostream& operator<< (bool& val) {
		char temp;
		if(val)
			_string.append("1");
		else
			_string.append("0");

		return ostream();

	}
	ostream& operator<< (short& val) {
		char* temp = new char[NUM_SIZE];
		itoa(val, temp, DEC);
		_string.append(temp);
		return ostream();
	}

	ostream& operator<< (unsigned short& val) {
			char* temp = new char[NUM_SIZE];
			itoa(val, temp, DEC);
			_string.append(temp);
			return ostream();
		}

	ostream& operator<< (long& val) {
		char* temp = new char[NUM_SIZE];
		itoa(val, temp, DEC);
		_string.append(temp);
		return ostream();
	}

	ostream& operator<< (unsigned long& val) {
		char* temp = new char[NUM_SIZE];
		itoa(val, temp, DEC);
		_string.append(temp);
		return ostream();
	}


	ostream& operator<< (float val) {
		char* temp = new char[NUM_SIZE];
		char* temp2 = new char[2];
		int n = (int) val;
		itoa(n, temp, DEC);
		strcat(temp, ".");
		val = val - (float) n;
		for(int i = 0;i < NUM_SIZE, val != 0;i++){
			val = val * DEC;
			n = (int) val;
			itoa(n, temp2, DEC);
			strcat(temp, temp2);
		}
		_string.append(temp);
		return ostream();
	}

	ostream& operator<< (double val) {
		char* temp = new char[NUM_SIZE];
		char* temp2 = new char[2];
		int n = (int) val;
		itoa(n, temp, DEC);
		strcat(temp, ".");
		val = val - (double) n;
		for(int i = 0;i < NUM_SIZE, val != 0;i++){
			val = val * DEC;
			n = (int) val;
			itoa(n, temp2, DEC);
			strcat(temp, temp2);
		}
		_string.append(temp);
		return ostream();
	}
	ostream& operator<< (char& val) {
		_string.append(val, 1);
		return ostream();
	}

	ostream& operator<< (unsigned char& val) {
		    char val1 = (char) val;
			_string.append(val1, 1);
			return ostream();
		}

	ostream& operator<< (const char* val) {
		int tam = strlen(val);
		_string.append(val, tam);
		return ostream();
	}
};

class ostringstream:public ostream{
public:
	explicit ostringstream ( openmode which = out ){ostream();}
	explicit ostringstream ( const string & str, openmode which = out ){ostream();}
	stringbuf* rdbuf ( ) const;
	string str ( ) const;
	void str ( const string & s );
//	ostream& operator<< (string& val );
//	ostream& operator<< (int &val);
//	ostream& operator<< (int val);
//	ostream& operator<< (double val);
//	ostream& operator<< (const char* s );
};

}

#endif
