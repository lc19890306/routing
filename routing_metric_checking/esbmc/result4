Last login: Mon Jul 21 16:11:52 on ttys010
changliu@Acccs-MacBook-Air:~/Dropbox/FCC implementation verification/examples/gmsk_sdr$ ssh_chang.sh 
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.8.0-44-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Sat Jul 26 03:38:04 EDT 2014

  System load:     3.28                IP address for eth1:    192.168.1.250
  Usage of /:      83.6% of 908.93GB   IP address for wlan1:   172.31.170.171
  Memory usage:    81%                 IP address for docker0: 172.17.42.1
  Swap usage:      44%                 IP address for vmnet1:  172.16.123.1
  Processes:       288                 IP address for vmnet8:  192.168.21.1
  Users logged in: 1

  => There is 1 zombie process.

  Graph this data and manage this system at:
    https://landscape.canonical.com/

4 packages can be updated.
1 update is a security update.



Your current Hardware Enablement Stack (HWE) is going out of support
on 08/07/14.  After this date security updates for critical parts (kernel
and graphics stack) of your system will no longer be available.

For more information, please see:
http://wiki.ubuntu.com/1204_HWE_EOL

To upgrade to a supported (or longer supported) configuration:

* Upgrade from Ubuntu 12.04 LTS to Ubuntu 14.04 LTS by running:
sudo do-release-upgrade 

OR

* Install a newer HWE version by running:
sudo apt-get install libgl1-mesa-glx-lts-trusty xserver-xorg-lts-trusty linux-image-generic-lts-trusty

and reboot your system.

*** System restart required ***
Last login: Sat Jul 26 00:51:01 2014 from c-71-197-7-13.hsd1.va.comcast.net
changl@changl-Vostro-470:~$ cd Dropbox/routing\ metric\ verification/backup/src/esbmc/
changl@changl-Vostro-470:~/Dropbox/routing metric verification/backup/src/esbmc$ ls
#dijkstra.cpp#  Libraries  MFR_ei.cpp~  NFP.cpp   RPF.cpp.bak  VFF.c~                              adv_greedy_forwarding_v2 (PLQ).cpp~  compass.c~  wcett_ef.c   wcett_ei.c~
LPF.cpp         MFR.cpp    MFR_v2.cpp   NFP.cpp~  RPF.cpp~     adv_greedy_forwarding_v1.cpp        compass.c                            hop_cnt.c   wcett_ef.c~
LPF.cpp~        MFR.cpp~   MFR_v2.cpp~  RPF.cpp   VFF.c        adv_greedy_forwarding_v2 (PLQ).cpp  compass.cpp                          hop_cnt.c~  wcett_ei.c
changl@changl-Vostro-470:~/Dropbox/routing metric verification/backup/src/esbmc$ cat MFR.cpp
/* MFR - Most Forward within Radius
 * A packet is forwarded to the closest node to the destination /
 * among all the neighbors of the forwarding node that are closer /
 * to the destination than the forwarding node
 * It has odd symmetry, transitivity, source independence, and local minimum freeness properties
 * lacks strict order
 */

#include <stdio.h>
#include "cmath"
//#include "CarmSqrt.h"

#define PHI 0
#define MAX 9

float dist(float u[], float d[]) {
  float res = (u[0]-d[0]) * (u[0]-d[0]) + (u[1]-d[1]) * (u[1]-d[1]);
  __ESBMC_assume(res >= 0);
  float ret = sqrt(res);//CarmSqrt(res);

  return ret;
}

/*
int dist_sq(int u[], int d[]) {
  int ret = (u[0]-d[0]) * (u[0]-d[0]) + (u[1]-d[1]) * (u[1]-d[1]);
  return ret;
}
*/
float weight(float dist_ud, float dist_vd) {
  float ret = dist_vd - dist_ud;
  return ret;
}

int main() {
  float u[2], v[2], d[2];

  //  int dist_uv_sq = dist_sq(u, v);

  __ESBMC_assume(u[0] != v[0] || u[1] != v[1]);

  __ESBMC_assume(0 <= u[0] && u[0] < 100
		   && 0 <= u[1] && u[1] < 100
		   && 0 <= v[0] && v[0] < 100
		   && 0 <= v[1] && v[1] < 100
		   && 0 <= d[0] && d[0] < 100
		   && 0 <= d[1] && d[1] < 100);

  //  __ESBMC_assume(dist_xd != dist_yd);

  float dist_ud = dist(u, d);
  float dist_vd = dist(v, d);

  __ESBMC_assume(dist_ud > 0
		 && dist_vd > 0);

  float w_uv = weight(dist_ud, dist_vd);
  float w_vu = weight(dist_vd, dist_ud);
    
  // Odd symmetry test
  //  __ESBMC_assume(w_uv <= PHI);
  //  assert(w_vu >= PHI);

  /* p[i][0] --> x coordinate of point
   * p[i][1] --> y coordinate of point
   *//*
  int i;
  float p[MAX][2], link[MAX];

  for (i = 0; i < MAX; ++i) {
    __ESBMC_assume(0 <= p[i][0] && p[i][0] < 100
		     && 0 <= p[i][1] && p[i][1] < 100);
    link[i] = dist(p[i], d);
    __ESBMC_assume(link[i] > 0);
    if (i < MAX-1)
      __ESBMC_assume(dist(p[i], p[i+1]) > 0);
  }

  // Transitivity
  for (i = 0; i < MAX-1; ++i) {
    __ESBMC_assume(weight(link[i], link[i+1]) <= PHI);
  }
  assert(weight(link[0], link[MAX-1]) <= PHI);
     */
  // Strict order
  float w[2];
  //  int dist_uw_sq = dist_sq(u, w);
  float dist_wd = dist(w, d);
  //  int dist_vw_sq = dist_sq(v, w);

  __ESBMC_assume(0 <= w[0] && w[0] < 100
		 && 0 <= w[1] && w[1] < 100);

  __ESBMC_assume(dist_wd > 0);
  __ESBMC_assume(u[0] != w[0] || u[1] != w[1]);
  
  float w_uw = weight(dist_ud, dist_wd);

  __ESBMC_assume(v[0] != w[0] || v[1] != w[1]);
  assert(w_uv != w_uw);
       
  return 0;
}
changl@changl-Vostro-470:~/Dropbox/routing metric verification/backup/src/esbmc$ cat MFR.cpp
/* MFR - Most Forward within Radius
 * A packet is forwarded to the closest node to the destination /
 * among all the neighbors of the forwarding node that are closer /
 * to the destination than the forwarding node
 * It has odd symmetry, transitivity, source independence, and local minimum freeness properties
 * lacks strict order
 */

#include <stdio.h>
#include "cmath"
//#include "CarmSqrt.h"

#define PHI 0
#define MAX 3

float dist(float u[], float d[]) {
  float res = (u[0]-d[0]) * (u[0]-d[0]) + (u[1]-d[1]) * (u[1]-d[1]);
  __ESBMC_assume(res >= 0);
  float ret = sqrt(res);//CarmSqrt(res);

  return ret;
}

/*
int dist_sq(int u[], int d[]) {
  int ret = (u[0]-d[0]) * (u[0]-d[0]) + (u[1]-d[1]) * (u[1]-d[1]);
  return ret;
}
*/
float weight(float dist_ud, float dist_vd) {
  float ret = dist_vd - dist_ud;
  return ret;
}

int main() {
  float u[2], v[2], d[2];

  //  int dist_uv_sq = dist_sq(u, v);

  __ESBMC_assume(u[0] != v[0] || u[1] != v[1]);

  __ESBMC_assume(0 <= u[0] && u[0] < 100
		   && 0 <= u[1] && u[1] < 100
		   && 0 <= v[0] && v[0] < 100
		   && 0 <= v[1] && v[1] < 100
		   && 0 <= d[0] && d[0] < 100
		   && 0 <= d[1] && d[1] < 100);

  //  __ESBMC_assume(dist_xd != dist_yd);

  float dist_ud = dist(u, d);
  float dist_vd = dist(v, d);

  __ESBMC_assume(dist_ud > 0
		 && dist_vd > 0);

  float w_uv = weight(dist_ud, dist_vd);
  // float w_vu = weight(dist_vd, dist_ud);
    
  // Odd symmetry test
  //  __ESBMC_assume(w_uv <= PHI);
  //  assert(w_vu >= PHI);

  /* p[i][0] --> x coordinate of point
   * p[i][1] --> y coordinate of point
   *//*
  int i;
  float p[MAX][2], link[MAX];

  for (i = 0; i < MAX; ++i) {
    __ESBMC_assume(0 <= p[i][0] && p[i][0] < 100
		     && 0 <= p[i][1] && p[i][1] < 100);
    link[i] = dist(p[i], d);
    __ESBMC_assume(link[i] > 0);
    if (i < MAX-1)
      __ESBMC_assume(dist(p[i], p[i+1]) > 0);
  }

  // Transitivity
  for (i = 0; i < MAX-1; ++i) {
    __ESBMC_assume(weight(link[i], link[i+1]) <= PHI);
  }
  assert(weight(link[0], link[MAX-1]) <= PHI);
     */
  // Strict order
  float w[2];
  //  int dist_uw_sq = dist_sq(u, w);
  float dist_wd = dist(w, d);
  //  int dist_vw_sq = dist_sq(v, w);

  __ESBMC_assume(0 <= w[0] && w[0] < 100
		 && 0 <= w[1] && w[1] < 100);

  __ESBMC_assume(dist_wd > 0);
  __ESBMC_assume(u[0] != w[0] || u[1] != w[1]);
  
  float w_uw = weight(dist_ud, dist_wd);

  __ESBMC_assume(v[0] != w[0] || v[1] != w[1]);
  assert(w_uv != w_uw);
       
  return 0;
}
changl@changl-Vostro-470:~/Dropbox/routing metric verification/backup/src/esbmc$ esbmc MFR.cpp -I ./Libraries/
file MFR.cpp: Parsing
Converting
Type-checking MFR.cpp
Generating GOTO Program
GOTO program creation time: 0.097s
GOTO program processing time: 0.004s
Starting Bounded Model Checking
Unwinding loop 0 iteration 1 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 2 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 3 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 4 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 5 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 6 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 7 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 8 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 9 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 10 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 11 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 12 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 13 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 14 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 15 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 1 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 2 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 3 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 4 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 5 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 6 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 7 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 8 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 9 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 10 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 11 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 12 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 13 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 14 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 15 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 1 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 2 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 3 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 4 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 5 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 6 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 7 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 8 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 9 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 10 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 11 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 12 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 13 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 14 file ./Libraries//cmath line 28
Unwinding loop 0 iteration 15 file ./Libraries//cmath line 28
size of program expression: 368 assignments
Generated 97 VCC(s), 49 remaining after simplification
Encoding remaining VCC(s) using bit-vector arithmetic
Encoding to solver time: 0.003s
Solving with SMT Solver Z3 v4.0
^C
changl@changl-Vostro-470:~/Dropbox/routing metric verification/backup/src/esbmc$ 
